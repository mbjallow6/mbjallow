---
// src/components/CoverImage.astro
import { Image } from 'astro:assets'

interface Props {
  coverImage: string | { src: any; alt: string } | undefined
  coverImageAlt?: string
  class?: string
  priority?: boolean
}

const { coverImage, coverImageAlt, class: className = "", priority = false } = Astro.props

// Image processing logic
let shouldRender = false
let imageSrc: any = null
let imageAlt = ""
let imageWidth: number | undefined = undefined
let imageHeight: number | undefined = undefined
let useInferSize = false

if (coverImage) {
  shouldRender = true
  
  if (typeof coverImage === 'string') {
    imageSrc = coverImage
    imageAlt = coverImageAlt || 'Cover image'
    
    // Handle different string formats
    if (coverImage.startsWith('http://') || coverImage.startsWith('https://')) {
      // External URLs - use inferSize to get dimensions automatically
      useInferSize = true
    } else if (coverImage.startsWith('/images/') || coverImage.startsWith('/')) {
      // Public folder paths - these are already optimized by build process
      useInferSize = true
    } else if (coverImage.startsWith('./')) {
      // Relative paths - should be resolved during build
      useInferSize = false
    }
  } else if (coverImage && typeof coverImage === 'object' && coverImage.src) {
    // Manual object with Astro optimized image
    imageSrc = coverImage.src
    imageAlt = coverImage.alt || coverImageAlt || 'Cover image'
    useInferSize = false
  }
}
---

{shouldRender && imageSrc && (
  <Image
    src={imageSrc}
    alt={imageAlt}
    class={className}
    priority={priority}
    inferSize={useInferSize}
    quality={85}
    format="webp"
    loading={priority ? 'eager' : 'lazy'}
    decoding={priority ? 'sync' : 'async'}
  />
)}
