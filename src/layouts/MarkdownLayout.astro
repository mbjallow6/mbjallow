---
// file: src/layouts/MarkdownLayout.astro
import Layout from '~/layouts/Layout.astro'
import AccessibleImage from '~/components/AccessibleImage.astro'
import type { MarkdownLayoutProps } from 'astro'

interface FrontmatterProps {
  title: string
  description?: string
  published?: Date
  author?: string
  coverImage?: any
  coverImageAlt?: string
  tags?: string[]
}

type Props = MarkdownLayoutProps<FrontmatterProps>

const { frontmatter } = Astro.props
const { title, description, published, author, coverImage, coverImageAlt, tags } = frontmatter

/**
 * PRODUCTION-READY: Comprehensive contextual alt text generation
 */
const generateContextualFallback = (): string => {
  if (description && title) {
    const contextualAlt = `Cover image for "${title}" - ${description.substring(0, 60)}${description.length > 60 ? '...' : ''}`
    return contextualAlt.length <= 125 ? contextualAlt : contextualAlt.substring(0, 122) + '...'
  }
  
  if (title) {
    return `Cover image for blog post: ${title}`
  }
  
  return "Blog post cover image"
}

/**
 * BULLETPROOF: Enhanced image validation with detailed reporting
 */
const validateCoverImage = (): { display: boolean; reason: string; isValid: boolean } => {
  // Handle null, undefined, or falsy values
  if (!coverImage) {
    return { display: false, reason: 'no-image-provided', isValid: false }
  }
  
  // Handle empty string
  if (coverImage === '') {
    return { display: false, reason: 'empty-string', isValid: false }
  }
  
  // Handle string-type cover images
  if (typeof coverImage === 'string') {
    const trimmed = coverImage.trim()
    if (trimmed === '') {
      return { display: false, reason: 'whitespace-only-string', isValid: false }
    }
    
    // Validate string patterns
    const isValidUrl = trimmed.startsWith('http://') || trimmed.startsWith('https://')
    const isValidPath = trimmed.startsWith('/')
    const isValidDataUrl = trimmed.startsWith('data:image/')
    const looksLikeImage = trimmed.includes('.') && /\.(jpg|jpeg|png|webp|gif|svg|avif)$/i.test(trimmed)
    
    if (isValidUrl || isValidPath || isValidDataUrl || looksLikeImage) {
      return { display: true, reason: 'valid-string-source', isValid: true }
    }
    
    return { display: false, reason: 'invalid-string-format', isValid: false }
  }
  
  // Handle object-type cover images
  if (typeof coverImage === 'object' && coverImage !== null) {
    // ImageMetadata objects (imported images)
    if ('src' in coverImage && 'width' in coverImage && 'height' in coverImage) {
      return { display: true, reason: 'imported-image-metadata', isValid: true }
    }
    
    // Objects with src property
    if ('src' in coverImage && coverImage.src) {
      if (typeof coverImage.src === 'string') {
        const trimmed = coverImage.src.trim()
        return trimmed ? 
          { display: true, reason: 'object-with-valid-string-src', isValid: true } : 
          { display: false, reason: 'object-with-empty-string-src', isValid: false }
      }
      
      // Nested ImageMetadata
      if (typeof coverImage.src === 'object' && 'width' in coverImage.src) {
        return { display: true, reason: 'object-with-image-metadata-src', isValid: true }
      }
    }
    
    return { display: false, reason: 'invalid-object-structure', isValid: false }
  }
  
  return { display: false, reason: 'unsupported-type', isValid: false }
}

const contextualFallback = generateContextualFallback()
const imageValidation = validateCoverImage()

// Enhanced development logging with actionable information
if (import.meta.env.DEV) {
  console.log(`üìù MarkdownLayout Debug for "${title}":`)
  console.log(`   Cover Image Type: ${typeof coverImage}`)
  console.log(`   Cover Image Value:`, coverImage)
  console.log(`   Cover Image Alt: ${coverImageAlt || 'Not provided'}`)
  console.log(`   Validation Result:`, imageValidation)
  console.log(`   Contextual Fallback: "${contextualFallback}"`)
  
  if (!imageValidation.isValid) {
    console.warn(`‚ö†Ô∏è Cover image issue - ${imageValidation.reason}`)
    
    // Provide helpful suggestions
    if (typeof coverImage === 'string' && coverImage.startsWith('./')) {
      console.warn(`üí° Suggestion: Move "${coverImage}" to "public/images/" and update frontmatter to use "/images/${coverImage.replace(/^\.\//, '')}"`)
    }
  }
  
  if (!coverImageAlt && imageValidation.display) {
    console.warn(`‚ö†Ô∏è Consider adding coverImageAlt for better accessibility`)
  }
}
---

<Layout title={title} description={description}>
  <article class="max-w-full py-7.5" role="main">
    <!-- Cover Image Section with comprehensive error handling -->
    {imageValidation.display ? (
      <div class="mb-6">
        <AccessibleImage 
          src={coverImage}
          alt={coverImageAlt}
          fallbackAlt={contextualFallback}
          class="w-full h-64 object-cover rounded-lg shadow-sm"
          width={800}
          height={400}
          priority={true}
          loading="eager"
          quality={85}
          format="webp"
          title={title}
        />
      </div>
    ) : (
      <!-- Development-only debugging placeholder -->
      <Fragment>
        {import.meta.env.DEV && (
          <div class="mb-6 p-4 border-2 border-dashed border-yellow-300 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
            <div class="text-center text-yellow-700 dark:text-yellow-300">
              <svg class="w-6 h-6 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
              <p class="text-sm font-medium">No cover image for this post</p>
              <p class="text-xs mt-1">Reason: {imageValidation.reason}</p>
              {typeof coverImage === 'string' && coverImage.startsWith('./') && (
                <p class="text-xs mt-2 font-medium">
                  üí° Move to: <code class="bg-yellow-200 dark:bg-yellow-800 px-1 rounded">public/images/{coverImage.replace(/^\.\//, '')}</code>
                </p>
              )}
            </div>
          </div>
        )}
      </Fragment>
    )}

    <!-- Article Header -->
    <header class="mb-6">
      <h1 class="md:mx-2 mb-3 text-[1.75rem] text-heading1 font-semibold leading-tight">
        # {title}
      </h1>

      <!-- Post metadata with enhanced accessibility -->
      {(published || author || (tags && tags.length > 0)) && (
        <div class="md:mx-2 mb-5 flex flex-wrap gap-2 text-sm text-foreground opacity-70" role="contentinfo" aria-label="Post metadata">
          {published && (
            <time datetime={published.toISOString()} class="font-medium" title={`Published on ${published.toLocaleDateString()}`}>
              {published.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}
            </time>
          )}
          
          {author && published && <span aria-hidden="true" class="text-gray-400">‚Ä¢</span>}
          
          {author && (
            <span>
              <span class="sr-only">Author: </span>
              <span class="font-medium">By {author}</span>
            </span>
          )}
          
          {tags && tags.length > 0 && (published || author) && <span aria-hidden="true" class="text-gray-400">‚Ä¢</span>}
          
          {tags && tags.length > 0 && (
            <div class="flex flex-wrap gap-2" role="list" aria-label="Post tags">
              {tags.map(tag => (
                <span 
                  class="bg-secondary text-secondary-foreground px-2 py-1 rounded text-xs font-medium hover:bg-secondary/80 transition-colors" 
                  role="listitem"
                  title={`Tagged with: ${tag}`}
                >
                  <span class="sr-only">Tag: </span>
                  #{tag}
                </span>
              ))}
            </div>
          )}
        </div>
      )}
    </header>

    <!-- Article Content with enhanced prose styling -->
    <div class="mb-5 prose prose-lg max-w-none prose-headings:text-heading1 prose-a:text-accent prose-a:no-underline hover:prose-a:underline prose-code:text-accent prose-pre:bg-muted prose-img:rounded-lg prose-img:shadow-sm" role="document">
      <slot />
    </div>
  </article>
</Layout>

<style>
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  
  /* Enhanced focus indicators for accessibility */
  article h1:focus,
  article h2:focus,
  article h3:focus,
  article h4:focus,
  article h5:focus,
  article h6:focus {
    outline: 2px solid var(--theme-accent, #3b82f6);
    outline-offset: 2px;
    border-radius: 4px;
  }
  
  /* Smooth scrolling for anchor links */
  html {
    scroll-behavior: smooth;
  }
</style>
