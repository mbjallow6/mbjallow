---
import Layout from '~/layouts/Layout.astro'
import AccessibleImage from '~/components/AccessibleImage.astro'
import type { MarkdownLayoutProps } from 'astro'

interface FrontmatterProps {
  title: string
  description?: string
  published?: Date
  author?: string
  coverImage?: any // Accept literally anything
  coverImageAlt?: string
  tags?: string[]
}

type Props = MarkdownLayoutProps<FrontmatterProps>

const { frontmatter } = Astro.props
const { title, description, published, author, coverImage, coverImageAlt, tags } = frontmatter

/**
 * Generate comprehensive fallback alt text
 */
const generateContextualFallback = (): string => {
  if (description && title) {
    const contextualAlt = `Cover image for "${title}" - ${description.substring(0, 60)}${description.length > 60 ? '...' : ''}`
    return contextualAlt.length <= 125 ? contextualAlt : contextualAlt.substring(0, 122) + '...'
  }
  
  if (title) {
    return `Cover image for blog post: ${title}`
  }
  
  return "Blog post cover image"
}

/**
 * BULLETPROOF: Determine if we should display the cover image
 * This handles ALL edge cases including null, undefined, empty strings, etc.
 */
const shouldDisplayCoverImage = (): boolean => {
  // Handle null, undefined, or falsy values
  if (!coverImage) return false
  
  // Handle empty string
  if (coverImage === '') return false
  
  // Handle object-type cover images
  if (typeof coverImage === 'object' && coverImage !== null) {
    // Check if it has a src property
    if ('src' in coverImage && coverImage.src) {
      return true
    }
    return false
  }
  
  // Handle string-type cover images
  if (typeof coverImage === 'string') {
    const trimmedSrc = coverImage.trim()
    if (trimmedSrc.length === 0) return false
    
    // Accept any string that looks like it might be an image
    return (
      trimmedSrc.startsWith('http://') || 
      trimmedSrc.startsWith('https://') ||
      trimmedSrc.startsWith('/') ||
      trimmedSrc.includes('.')
    )
  }
  
  return false
}

const contextualFallback = generateContextualFallback()
const showCoverImage = shouldDisplayCoverImage()

// Enhanced logging for debugging
if (import.meta.env.DEV) {
  console.log(`üñºÔ∏è  MarkdownLayout debug for "${title}":`)
  console.log(`   coverImage type: ${typeof coverImage}`)
  console.log(`   coverImage value:`, coverImage)
  console.log(`   coverImageAlt: ${coverImageAlt || 'Not provided'}`)
  console.log(`   showCoverImage: ${showCoverImage}`)
  console.log(`   contextualFallback: "${contextualFallback}"`)
}
---

<Layout title={title} description={description}>
  <article class="max-w-full py-7.5" role="main">
    <!-- Cover Image - only show if we have a valid image -->
    {showCoverImage ? (
      <div class="mb-6">
        <AccessibleImage 
          src={coverImage}
          alt={coverImageAlt}
          fallbackAlt={contextualFallback}
          class="w-full h-64 object-cover rounded-lg"
          width={800}
          height={400}
          priority={true}
          loading="eager"
          quality={80}
          format="webp"
          title={title}
        />
      </div>
    ) : (
      import.meta.env.DEV && (
        <div class="mb-6 p-4 border-2 border-dashed border-gray-300 rounded-lg text-center text-gray-500">
          <p class="text-sm">No cover image provided for this post</p>
        </div>
      )
    )}

    <!-- Article Header -->
    <header class="mb-6">
      <h1 class="md:mx-2 mb-3 text-[1.75rem] text-heading1 font-semibold">
        # {title}
      </h1>

      <!-- Post metadata -->
      {(published || author || (tags && tags.length > 0)) && (
        <div class="md:mx-2 mb-5 flex flex-wrap gap-2 text-sm text-foreground opacity-70" role="contentinfo">
          {published && (
            <time datetime={published.toISOString()} class="font-medium">
              {published.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}
            </time>
          )}
          {author && published && <span aria-hidden="true">‚Ä¢</span>}
          {author && (
            <span>
              <span class="sr-only">Author: </span>
              By {author}
            </span>
          )}
          {tags && tags.length > 0 && (published || author) && <span aria-hidden="true">‚Ä¢</span>}
          {tags && tags.length > 0 && (
            <div class="flex gap-2" role="list" aria-label="Post tags">
              {tags.map(tag => (
                <span 
                  class="bg-secondary text-secondary-foreground px-2 py-1 rounded text-xs" 
                  role="listitem"
                >
                  <span class="sr-only">Tag: </span>
                  {tag}
                </span>
              ))}
            </div>
          )}
        </div>
      )}
    </header>

    <!-- Article Content -->
    <div class="mb-5 prose prose-lg max-w-none" role="document">
      <slot />
    </div>
  </article>
</Layout>

<style>
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>
