---
import Layout from '~/layouts/Layout.astro'
import AccessibleImage from '~/components/AccessibleImage.astro'
import type { MarkdownLayoutProps } from 'astro'

interface FrontmatterProps {
  title: string
  description?: string
  published?: Date
  author?: string
  coverImage?: string | { src: any; alt: string }
  coverImageAlt?: string
  tags?: string[]
}

type Props = MarkdownLayoutProps<FrontmatterProps>

const { frontmatter } = Astro.props
const { title, description, published, author, coverImage, coverImageAlt, tags } = frontmatter

/**
 * Generate comprehensive, accessible alt text with intelligent fallbacks
 * Following WCAG 2.1 guidelines for meaningful image descriptions
 * This now works as a fallback generator for the AccessibleImage component
 */
const generateContextualFallback = (): string => {
  // Create contextual description from available content
  if (description && title) {
    const contextualAlt = `Cover image for "${title}" - ${description.substring(0, 60)}${description.length > 60 ? '...' : ''}`
    return contextualAlt.length <= 125 ? contextualAlt : contextualAlt.substring(0, 122) + '...'
  }
  
  // Basic title-based description
  if (title) {
    return `Cover image for blog post: ${title}`
  }
  
  // Generic but meaningful fallback
  return "Blog post cover image"
}

/**
 * Determine if we should display the cover image
 * This validates the image source before passing to AccessibleImage
 */
const shouldDisplayCoverImage = (): boolean => {
  if (!coverImage) return false
  
  // Handle object-type cover images (imported images)
  if (typeof coverImage === 'object' && coverImage.src) {
    return true
  }
  
  // Handle string-type cover images (URLs and paths)
  if (typeof coverImage === 'string') {
    const trimmedSrc = coverImage.trim()
    return trimmedSrc.length > 0 && (
      trimmedSrc.startsWith('http://') || 
      trimmedSrc.startsWith('https://') ||
      trimmedSrc.startsWith('/') ||
      trimmedSrc.includes('.')
    )
  }
  
  return false
}

// Generate contextual fallback for AccessibleImage component
const contextualFallback = generateContextualFallback()
const showCoverImage = shouldDisplayCoverImage()

// Log image handling information in development (enhanced logging)
if (import.meta.env.DEV && showCoverImage) {
  console.log(`üñºÔ∏è  MarkdownLayout image info for "${title}":`)
  console.log(`   Cover Image Type: ${typeof coverImage}`)
  console.log(`   Cover Image Source: ${typeof coverImage === 'string' ? coverImage : '[Object]'}`)
  console.log(`   Explicit Alt Text: ${coverImageAlt ? `"${coverImageAlt}"` : 'Not provided'}`)
  console.log(`   Generated Fallback: "${contextualFallback}"`)
  console.log(`   Will use AccessibleImage component for rendering`)
  
  if (!coverImageAlt && typeof coverImage !== 'object') {
    console.warn(`‚ö†Ô∏è  No explicit alt text provided. AccessibleImage will handle fallback generation.`)
  }
}
---

<Layout title={title} description={description}>
  <article class="max-w-full py-7.5" role="main">
    <!-- Cover Image using AccessibleImage component -->
    {showCoverImage && (
      <div class="mb-6">
        <AccessibleImage 
          src={coverImage}
          alt={coverImageAlt}
          fallbackAlt={contextualFallback}
          class="w-full h-64 object-cover rounded-lg"
          width={800}
          height={400}
          priority={true}
          loading="eager"
          quality={80}
          format="webp"
          title={title}
        />
      </div>
    )}

    <!-- Article Header -->
    <header class="mb-6">
      <h1 class="md:mx-2 mb-3 text-[1.75rem] text-heading1 font-semibold">
        # {title}
      </h1>

      <!-- Post metadata with semantic markup -->
      {(published || author || (tags && tags.length > 0)) && (
        <div class="md:mx-2 mb-5 flex flex-wrap gap-2 text-sm text-foreground opacity-70" role="contentinfo">
          {published && (
            <time datetime={published.toISOString()} class="font-medium">
              {published.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}
            </time>
          )}
          {author && published && <span aria-hidden="true">‚Ä¢</span>}
          {author && (
            <span>
              <span class="sr-only">Author: </span>
              By {author}
            </span>
          )}
          {tags && tags.length > 0 && (published || author) && <span aria-hidden="true">‚Ä¢</span>}
          {tags && tags.length > 0 && (
            <div class="flex gap-2" role="list" aria-label="Post tags">
              {tags.map(tag => (
                <span 
                  class="bg-secondary text-secondary-foreground px-2 py-1 rounded text-xs" 
                  role="listitem"
                >
                  <span class="sr-only">Tag: </span>
                  {tag}
                </span>
              ))}
            </div>
          )}
        </div>
      )}
    </header>

    <!-- Article Content -->
    <div class="mb-5 prose prose-lg max-w-none" role="document">
      <slot />
    </div>
  </article>
</Layout>

<!-- Accessibility and utility styles -->
<style>
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>
