---
import Layout from '~/layouts/Layout.astro'
import { Image } from 'astro:assets'
import type { MarkdownLayoutProps } from 'astro'

interface FrontmatterProps {
  title: string
  description?: string
  published?: Date
  author?: string
  coverImage?: string | { src: any; alt: string }
  coverImageAlt?: string
  tags?: string[]
}

type Props = MarkdownLayoutProps<FrontmatterProps>

const { frontmatter } = Astro.props
const { title, description, published, author, coverImage, coverImageAlt, tags } = frontmatter

/**
 * Get appropriate alt text with better fallbacks
 */
const getImageAlt = (): string => {
  if (typeof coverImage === 'object' && coverImage?.alt) {
    return coverImage.alt
  }
  if (coverImageAlt) {
    return coverImageAlt
  }
  if (description) {
    return `Cover image for: ${title} - ${description.substring(0, 80)}${description.length > 80 ? '...' : ''}`
  }
  return `Cover image for: ${title}`
}

// Check if the coverImage is a valid URL or imported image
const isValidImage = coverImage && (
  (typeof coverImage === 'string' && (coverImage.startsWith('http') || coverImage.startsWith('/'))) ||
  (typeof coverImage === 'object' && coverImage.src)
)

const altText = getImageAlt()
const optimizedAltText = altText.length > 125 ? altText.substring(0, 122) + '...' : altText
---

<Layout title={title} description={description}>
  <article class="max-w-full py-7.5" role="main">
    <!-- Only render image if it's valid -->
    {isValidImage && (
      <figure class="mb-6" role="img" aria-describedby="cover-image-caption">
        {typeof coverImage === 'string' ? (
          <img 
            src={coverImage} 
            alt={optimizedAltText}
            class="w-full h-64 object-cover rounded-lg"
            loading="lazy"
            decoding="async"
          />
        ) : (
          <Image 
            src={coverImage.src} 
            alt={optimizedAltText}
            class="w-full h-64 object-cover rounded-lg"
            width={800}
            height={400}
            loading="lazy"
            decoding="async"
          />
        )}
        <figcaption id="cover-image-caption" class="sr-only">
          {optimizedAltText}
        </figcaption>
      </figure>
    )}

    <header class="mb-6">
      <h1 class="md:mx-2 mb-3 text-[1.75rem] text-heading1 font-semibold">
        # {title}
      </h1>

      {(published || author || (tags && tags.length > 0)) && (
        <div class="md:mx-2 mb-5 flex flex-wrap gap-2 text-sm text-foreground opacity-70" role="contentinfo">
          {published && (
            <time datetime={published.toISOString()} class="font-medium">
              {published.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}
            </time>
          )}
          {author && published && <span aria-hidden="true">•</span>}
          {author && (
            <span>
              <span class="sr-only">Author: </span>
              By {author}
            </span>
          )}
          {tags && tags.length > 0 && (published || author) && <span aria-hidden="true">•</span>}
          {tags && tags.length > 0 && (
            <div class="flex gap-2" role="list" aria-label="Post tags">
              {tags.map(tag => (
                <span 
                  class="bg-secondary text-secondary-foreground px-2 py-1 rounded text-xs" 
                  role="listitem"
                >
                  <span class="sr-only">Tag: </span>
                  {tag}
                </span>
              ))}
            </div>
          )}
        </div>
      )}
    </header>

    <div class="mb-5 prose prose-lg max-w-none" role="document">
      <slot />
    </div>
  </article>
</Layout>

<style>
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>
